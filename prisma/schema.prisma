generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role        @default(USER)
  accounts      Account[]
  sessions      Session[]
  favorites     Favorites[]
  order         Order[]
  cart          CartItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @unique
  token      String   @unique
  expires    DateTime
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  total     Float
  item      OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // unit price at the time of order
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}


model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  crossedPrice Int
  sellingPrice Int
  costPrice Int
  numOfProduct Int
  regularSizes Int
  extraSizes Int
  image       String?
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])

  favorites   Favorites[]
  item        OrderItem[]
  cart        CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Favorites {
  id        String  @id @default(uuid())
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String  @id @default(uuid())
  userId    String
  productId String
  quantity  String
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  // One-to-many relation: one category has many products.
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}